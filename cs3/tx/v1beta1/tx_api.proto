// Copyright 2018-2019 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

syntax = "proto3";

package cs3.tx.v1beta1;

option csharp_namespace = "Cs3.Tx.V1Beta1";
option go_package = "txv1beta1";
option java_multiple_files = true;
option java_outer_classname = "TxApiProto";
option java_package = "com.cs3.tx.v1beta1";
option objc_class_prefix = "CTX";
option php_namespace = "Cs3\\Tx\\V1Beta1";

import "cs3/rpc/v1beta1/status.proto";
import "cs3/storage/provider/v1beta1/resources.proto";
import "cs3/tx/v1beta1/resources.proto";

// Tx API
//
// The Tx API provides data transfer capabilities.
//
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
// NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
// "OPTIONAL" in this document are to be interpreted as described in
// RFC 2119.
//
// The following are global requirements that apply to all methods:
// Any method MUST return CODE_OK on a succesful operation.
// Any method MAY return NOT_IMPLEMENTED.
// Any method MAY return INTERNAL.
// Any method MAY return UNKNOWN.
// Any method MAY return UNAUTHENTICATED.
service TxAPI {
  // Creates (requests the destination to accept) a transfer.
  // Returns a response containing a TxInfo (transfer info) object.
  rpc CreateTransfer(CreateTransferRequest) returns (CreateTransferResponse);
  // Requests a transfer status.
  rpc GetTransferStatus(GetTransferStatusRequest) returns (GetTransferStatusResponse);
  // Requests to cancel a transfer.
  rpc CancelTransfer(CancelTransferRequest) returns (CancelTransferResponse);
}

message CreateTransferRequest {
  // TODO: any additional fields; Opaque information ??

  // REQUIRED.
  // The reference to the resource to be transfered.
  // TODO: maybe the ResourcePermissions should be expended with a transfer permission ???
  cs3.storage.provider.v1beta1.ResourceInfo resource_info = 1;
  // REQUIRED.
  // The destination reference the resource is transferred to.
  // An email address.
  string dest_email = 2;
}

message CreateTransferResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.v1beta1.Status status = 1;
  // REQUIRED.
  // TxInfo, includes transfer id, status, description.
  TxInfo tx_info = 2;
}

message GetTransferStatusRequest {
  // REQUIRED.
  // The transfer id.
  string tx_id = 1;
}

message GetTransferStatusResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.v1beta1.Status status = 1;
  // REQUIRED.
  // TxInfo, includes transfer id, status, description.
  TxInfo tx_info = 2;
}

message CancelTransferRequest {
  // REQUIRED.
  // The transfer id.
  string tx_id = 1;
}

message CancelTransferResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.v1beta1.Status status = 1;
  // REQUIRED.
  // TxInfo, includes transfer id, status, description.
  TxInfo tx_info = 2;
}
