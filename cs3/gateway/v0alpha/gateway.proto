// Copyright 2018-2019 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

syntax = "proto3";

package cs3.gatewayv0alpha;

option csharp_namespace = "CS3.GatewayV0Alpha";
option go_package = "gatewayv0alphapb";
option java_multiple_files = true;
option java_outer_classname = "GatewayProto";
option java_package = "com.cs3.gatewayv0alpha";
option objc_class_prefix = "CBOXAB";
option php_namespace = "CS3\\GatewayV0Alpha";

import "cs3/auth/v0alpha/auth.proto";
import "cs3/storageprovider/v0alpha/resources.proto";
import "cs3/storageprovider/v0alpha/storageprovider.proto";
import "cs3/types/types.proto";
import "cs3/usershareprovider/v0alpha/usershareprovider.proto";

// Gateway API
//
// The Gateway API is the only API exposed direclty to end-clients.
// It is a facade API that all clients should connect to.
// Other APIS like the StorageProviderAPI are internal APIS.
//
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
// NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
// "OPTIONAL" in this document are to be interpreted as described in
// RFC 2119.
//
// The following are global requirements that apply to all methods:
// Any method MUST return CODE_OK on a succesful operation.
// Any method MAY return NOT_IMPLEMENTED.
// Any method MAY return INTERNAL.
// Any method MAY return UNKNOWN.
// Any method MAY return UNAUTHENTICATED.
service GatewayService {
  // *****************************************************************/
  // ************************ AUTH ******** **************************/
  // *****************************************************************/
  rpc GenerateAccessToken(cs3.authv0alpha.GenerateAccessTokenRequest) returns (cs3.authv0alpha.GenerateAccessTokenResponse);
  rpc WhoAmI(cs3.authv0alpha.WhoAmIRequest) returns (cs3.authv0alpha.WhoAmIResponse);
  // *****************************************************************/
  // ************************ STORAGE PROVIDER ***********************/
  // *****************************************************************/
  // Creates a new resource of type container.
  // MUST return CODE_PRECONDITION_FAILED if the container
  // cannot be created at the specified reference.
  rpc CreateContainer(cs3.storageproviderv0alpha.CreateContainerRequest) returns (cs3.storageproviderv0alpha.CreateContainerResponse);
  // Deletes a resource.
  // If a resource specifies the non-empty container (directory, ...),
  // then the entire directory is deleted recursively.
  // If a resource specifies a reference or symlink type, only the reference is removed (not the target).
  // MUST return CODE_NOT_FOUND if the reference does not exist.
  rpc Delete(cs3.storageproviderv0alpha.DeleteRequest) returns (cs3.storageproviderv0alpha.DeleteResponse);
  // Returns the path reference for
  // the provided resource id reference.
  // MUST return CODE_NOT_FOUND if the reference does not exist
  rpc GetPath(cs3.storageproviderv0alpha.GetPathRequest) returns (cs3.storageproviderv0alpha.GetPathResponse);
  // Returns the quota available under the provided
  // reference.
  // MUST return CODE_NOT_FOUND if the reference does not exist
  // MUST return CODE_RESOURCE_EXHAUSTED on exceeded quota limits.
  rpc GetQuota(GetQuotaRequest) returns (cs3.storageproviderv0alpha.GetQuotaResponse);
  // Initiates the download of a file using an
  // out-of-band data transfer mechanism.
  rpc InitiateFileDownload(cs3.storageproviderv0alpha.InitiateFileDownloadRequest) returns (cs3.storageproviderv0alpha.InitiateFileDownloadResponse);
  // Initiates the upload of a file using an
  // out-of-band data transfer mechanism.
  rpc InitiateFileUpload(cs3.storageproviderv0alpha.InitiateFileUploadRequest) returns (cs3.storageproviderv0alpha.InitiateFileUploadResponse);
  // Returns a stream of resource informations
  // for the provided reference.
  // MUST return CODE_NOT_FOUND if the reference does not exists.
  rpc ListContainerStream(cs3.storageproviderv0alpha.ListContainerStreamRequest) returns (stream cs3.storageproviderv0alpha.ListContainerStreamResponse);
  // Returns a list of resource information
  // for the provided reference.
  // MUST return CODE_NOT_FOUND if the reference does not exists.
  rpc ListContainer(cs3.storageproviderv0alpha.ListContainerRequest) returns (cs3.storageproviderv0alpha.ListContainerResponse);
  // Returns a list of the versions for a resource of
  // type file at the provided reference.
  // MUST return CODE_NOT_FOUND if the reference does not exist.
  // MUST return CODE_OK and MUST return an empty list if no versions are available.
  // TODO: What code if resource not of type file?
  rpc ListFileVersions(cs3.storageproviderv0alpha.ListFileVersionsRequest) returns (cs3.storageproviderv0alpha.ListFileVersionsResponse);
  // Returns a stream of recycle items for this storage provider.
  rpc ListRecycleStream(ListRecycleStreamRequest) returns (stream cs3.storageproviderv0alpha.ListRecycleStreamResponse);
  // Returns a list of recycle items for this storage provider.
  // MUST return CODE_OK and MUST return an empty list if no recycle items are available.
  rpc ListRecycle(ListRecycleRequest) returns (cs3.storageproviderv0alpha.ListRecycleResponse);
  // Moves a resource from one reference to another.
  // MUST return CODE_NOT_FOUND if any of the references do not exist.
  // MUST return CODE_PRECONDITION_FAILED if the source reference
  // cannot be moved to the destination reference.
  rpc Move(cs3.storageproviderv0alpha.MoveRequest) returns (cs3.storageproviderv0alpha.MoveResponse);
  // Permanently removes a recycle item from the recycle.
  // This operation is irrevocable.
  // MUST return CODE_NOT_FOUND if the recycle item id does not exist.
  rpc PurgeRecycle(PurgeRecycleRequest) returns (cs3.storageproviderv0alpha.PurgeRecycleResponse);
  // Restores a file version for the provided reference.
  // MUST return CODE_NOT_FOUND if the reference does not exist.
  // MUST return CODE_NOT_FOUND if the version does not exist.
  rpc RestoreFileVersion(cs3.storageproviderv0alpha.RestoreFileVersionRequest) returns (cs3.storageproviderv0alpha.RestoreFileVersionResponse);
  // Restores a recycle item from the recycle.
  // MUST return CODE_NOT_FOUND if the recycle item id does not exist.
  // MUST return CODE_PRECONDITION_FAILED if the restore_path is non-empty
  // and the recycle item cannot be restored to the restore_path.
  rpc RestoreRecycleItem(cs3.storageproviderv0alpha.RestoreRecycleItemRequest) returns (cs3.storageproviderv0alpha.RestoreRecycleItemResponse);
  // Returns the resource information at the provided reference.
  // MUST return CODE_NOT_FOUND if the reference does not exist.
  rpc Stat(cs3.storageproviderv0alpha.StatRequest) returns (cs3.storageproviderv0alpha.StatResponse);
  // *****************************************************************/
  // ************************ USER SHARE PROVIDER ********************/
  // *****************************************************************/
  // Creates a new share.
  // MUST return CODE_NOT_FOUND if the resource reference does not exist.
  // MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
  // (owner, shared_resource, grantee).
  // New shares MUST be created in the state SHARE_STATE_PENDING.
  rpc CreateShare(cs3.usershareproviderv0alpha.CreateShareRequest) returns (cs3.usershareproviderv0alpha.CreateShareResponse);
  // Removes a share.
  // MUST return CODE_NOT_FOUND if the share reference does not exist.
  rpc RemoveShare(cs3.usershareproviderv0alpha.RemoveShareRequest) returns (cs3.usershareproviderv0alpha.RemoveShareResponse);
  // Gets share information for a single share.
  // MUST return CODE_NOT_FOUND if the share reference does not exist.
  rpc GetShare(cs3.usershareproviderv0alpha.GetShareRequest) returns (cs3.usershareproviderv0alpha.GetShareResponse);
  // List the shares the authenticated principal has created,
  // both as owner and creator. If a filter is specified, only
  // shares satisfying the filter MUST be returned.
  rpc ListShares(cs3.usershareproviderv0alpha.ListSharesRequest) returns (cs3.usershareproviderv0alpha.ListSharesResponse);
  // Updates a share.
  // MUST return CODE_NOT_FOUND if the share reference does not exist.
  rpc UpdateShare(cs3.usershareproviderv0alpha.UpdateShareRequest) returns (cs3.usershareproviderv0alpha.UpdateShareResponse);
  // List all shares the authenticated principal has received.
  rpc ListReceivedShares(cs3.usershareproviderv0alpha.ListReceivedSharesRequest) returns (cs3.usershareproviderv0alpha.ListReceivedSharesResponse);
  // Update the received share to change the share state or the display name.
  // MUST return CODE_NOT_FOUND if the share reference does not exist.
  rpc UpdateReceivedShare(cs3.usershareproviderv0alpha.UpdateReceivedShareRequest) returns (cs3.usershareproviderv0alpha.UpdateReceivedShareResponse);
  // Get the information for the given received share reference.
  // MUST return CODE_NOT_FOUND if the received share reference does not exist.
  rpc GetReceivedShare(cs3.usershareproviderv0alpha.GetReceivedShareRequest) returns (cs3.usershareproviderv0alpha.GetReceivedShareResponse);
}

message GetQuotaRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 1;
  // REQUIRED.
  // The reference to which the action should be performed.
  cs3.storageproviderv0alpha.Reference ref = 2;
}

message ListRecycleRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 1;
  // REQUIRED.
  // The reference to which the action should be performed.
  cs3.storageproviderv0alpha.Reference ref = 2;
  // OPTIONAL.
  // SHOULD be specified.
  // The start time range to query for recycle items.
  // The value is the Unix Epoch timestamp in seconds.
  cs3.types.Timestamp from_ts = 3;
  // OPTIONAL.
  // SHOULD be specified.
  // The end time range to query for recycle items.
  // The value is Unix Epoch timestamp in seconds.
  cs3.types.Timestamp to_ts = 4;
}

message ListRecycleStreamRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 1;
  // REQUIRED.
  // The reference to which the action should be performed.
  cs3.storageproviderv0alpha.Reference ref = 2;
  // OPTIONAL.
  // SHOULD be specified.
  // The start time range to query for recycle items.
  // The value is the Unix Epoch timestamp in seconds.
  cs3.types.Timestamp from_ts = 3;
  // OPTIONAL.
  // SHOULD be specified.
  // The end time range to query for recycle items.
  // The value is Unix Epoch timestamp in seconds.
  cs3.types.Timestamp to_ts = 4;
}

message PurgeRecycleRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 1;
  // REQUIRED.
  // The reference to which the action should be performed.
  cs3.storageproviderv0alpha.Reference ref = 2;
}
