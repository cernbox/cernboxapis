// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cs3/identity/user/v1beta1/user_api.proto

package userv1beta1

import (
	fmt "fmt"
	_ "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/rpc/v1beta1"
	_ "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/types/v1beta1"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserAPI service

func NewUserAPIEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserAPI service

type UserAPIService interface {
	// Gets the information about a user by the user id.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*GetUserResponse, error)
	// Gets the information about a user based on a specified claim.
	GetUserByClaim(ctx context.Context, in *GetUserByClaimRequest, opts ...client.CallOption) (*GetUserByClaimResponse, error)
	// Gets the groups of a user.
	GetUserGroups(ctx context.Context, in *GetUserGroupsRequest, opts ...client.CallOption) (*GetUserGroupsResponse, error)
	// Tells if the user is in a certain group.
	IsInGroup(ctx context.Context, in *IsInGroupRequest, opts ...client.CallOption) (*IsInGroupResponse, error)
	// Finds users by any attribute of the user.
	// TODO(labkode): to define the filters that make more sense.
	FindUsers(ctx context.Context, in *FindUsersRequest, opts ...client.CallOption) (*FindUsersResponse, error)
	// Finds groups whose names match the specified filter.
	FindGroups(ctx context.Context, in *FindGroupsRequest, opts ...client.CallOption) (*FindGroupsResponse, error)
}

type userAPIService struct {
	c    client.Client
	name string
}

func NewUserAPIService(name string, c client.Client) UserAPIService {
	return &userAPIService{
		c:    c,
		name: name,
	}
}

func (c *userAPIService) GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*GetUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.GetUser", in)
	out := new(GetUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) GetUserByClaim(ctx context.Context, in *GetUserByClaimRequest, opts ...client.CallOption) (*GetUserByClaimResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.GetUserByClaim", in)
	out := new(GetUserByClaimResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) GetUserGroups(ctx context.Context, in *GetUserGroupsRequest, opts ...client.CallOption) (*GetUserGroupsResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.GetUserGroups", in)
	out := new(GetUserGroupsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) IsInGroup(ctx context.Context, in *IsInGroupRequest, opts ...client.CallOption) (*IsInGroupResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.IsInGroup", in)
	out := new(IsInGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) FindUsers(ctx context.Context, in *FindUsersRequest, opts ...client.CallOption) (*FindUsersResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.FindUsers", in)
	out := new(FindUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) FindGroups(ctx context.Context, in *FindGroupsRequest, opts ...client.CallOption) (*FindGroupsResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.FindGroups", in)
	out := new(FindGroupsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserAPI service

type UserAPIHandler interface {
	// Gets the information about a user by the user id.
	GetUser(context.Context, *GetUserRequest, *GetUserResponse) error
	// Gets the information about a user based on a specified claim.
	GetUserByClaim(context.Context, *GetUserByClaimRequest, *GetUserByClaimResponse) error
	// Gets the groups of a user.
	GetUserGroups(context.Context, *GetUserGroupsRequest, *GetUserGroupsResponse) error
	// Tells if the user is in a certain group.
	IsInGroup(context.Context, *IsInGroupRequest, *IsInGroupResponse) error
	// Finds users by any attribute of the user.
	// TODO(labkode): to define the filters that make more sense.
	FindUsers(context.Context, *FindUsersRequest, *FindUsersResponse) error
	// Finds groups whose names match the specified filter.
	FindGroups(context.Context, *FindGroupsRequest, *FindGroupsResponse) error
}

func RegisterUserAPIHandler(s server.Server, hdlr UserAPIHandler, opts ...server.HandlerOption) error {
	type userAPI interface {
		GetUser(ctx context.Context, in *GetUserRequest, out *GetUserResponse) error
		GetUserByClaim(ctx context.Context, in *GetUserByClaimRequest, out *GetUserByClaimResponse) error
		GetUserGroups(ctx context.Context, in *GetUserGroupsRequest, out *GetUserGroupsResponse) error
		IsInGroup(ctx context.Context, in *IsInGroupRequest, out *IsInGroupResponse) error
		FindUsers(ctx context.Context, in *FindUsersRequest, out *FindUsersResponse) error
		FindGroups(ctx context.Context, in *FindGroupsRequest, out *FindGroupsResponse) error
	}
	type UserAPI struct {
		userAPI
	}
	h := &userAPIHandler{hdlr}
	return s.Handle(s.NewHandler(&UserAPI{h}, opts...))
}

type userAPIHandler struct {
	UserAPIHandler
}

func (h *userAPIHandler) GetUser(ctx context.Context, in *GetUserRequest, out *GetUserResponse) error {
	return h.UserAPIHandler.GetUser(ctx, in, out)
}

func (h *userAPIHandler) GetUserByClaim(ctx context.Context, in *GetUserByClaimRequest, out *GetUserByClaimResponse) error {
	return h.UserAPIHandler.GetUserByClaim(ctx, in, out)
}

func (h *userAPIHandler) GetUserGroups(ctx context.Context, in *GetUserGroupsRequest, out *GetUserGroupsResponse) error {
	return h.UserAPIHandler.GetUserGroups(ctx, in, out)
}

func (h *userAPIHandler) IsInGroup(ctx context.Context, in *IsInGroupRequest, out *IsInGroupResponse) error {
	return h.UserAPIHandler.IsInGroup(ctx, in, out)
}

func (h *userAPIHandler) FindUsers(ctx context.Context, in *FindUsersRequest, out *FindUsersResponse) error {
	return h.UserAPIHandler.FindUsers(ctx, in, out)
}

func (h *userAPIHandler) FindGroups(ctx context.Context, in *FindGroupsRequest, out *FindGroupsResponse) error {
	return h.UserAPIHandler.FindGroups(ctx, in, out)
}
