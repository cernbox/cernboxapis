// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cs3/tx/v1beta1/tx_api.proto

package txv1beta1

import (
	fmt "fmt"
	_ "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/rpc/v1beta1"
	_ "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/storage/provider/v1beta1"
	_ "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/types/v1beta1"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TxAPI service

func NewTxAPIEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TxAPI service

type TxAPIService interface {
	// Creates (requests the destination to accept) a transfer.
	// Returns a response containing a TxInfo (transfer info) object.
	CreateTransfer(ctx context.Context, in *CreateTransferRequest, opts ...client.CallOption) (*CreateTransferResponse, error)
	// Requests a transfer status.
	GetTransferStatus(ctx context.Context, in *GetTransferStatusRequest, opts ...client.CallOption) (*GetTransferStatusResponse, error)
	// Requests to cancel a transfer.
	CancelTransfer(ctx context.Context, in *CancelTransferRequest, opts ...client.CallOption) (*CancelTransferResponse, error)
}

type txAPIService struct {
	c    client.Client
	name string
}

func NewTxAPIService(name string, c client.Client) TxAPIService {
	return &txAPIService{
		c:    c,
		name: name,
	}
}

func (c *txAPIService) CreateTransfer(ctx context.Context, in *CreateTransferRequest, opts ...client.CallOption) (*CreateTransferResponse, error) {
	req := c.c.NewRequest(c.name, "TxAPI.CreateTransfer", in)
	out := new(CreateTransferResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txAPIService) GetTransferStatus(ctx context.Context, in *GetTransferStatusRequest, opts ...client.CallOption) (*GetTransferStatusResponse, error) {
	req := c.c.NewRequest(c.name, "TxAPI.GetTransferStatus", in)
	out := new(GetTransferStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txAPIService) CancelTransfer(ctx context.Context, in *CancelTransferRequest, opts ...client.CallOption) (*CancelTransferResponse, error) {
	req := c.c.NewRequest(c.name, "TxAPI.CancelTransfer", in)
	out := new(CancelTransferResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TxAPI service

type TxAPIHandler interface {
	// Creates (requests the destination to accept) a transfer.
	// Returns a response containing a TxInfo (transfer info) object.
	CreateTransfer(context.Context, *CreateTransferRequest, *CreateTransferResponse) error
	// Requests a transfer status.
	GetTransferStatus(context.Context, *GetTransferStatusRequest, *GetTransferStatusResponse) error
	// Requests to cancel a transfer.
	CancelTransfer(context.Context, *CancelTransferRequest, *CancelTransferResponse) error
}

func RegisterTxAPIHandler(s server.Server, hdlr TxAPIHandler, opts ...server.HandlerOption) error {
	type txAPI interface {
		CreateTransfer(ctx context.Context, in *CreateTransferRequest, out *CreateTransferResponse) error
		GetTransferStatus(ctx context.Context, in *GetTransferStatusRequest, out *GetTransferStatusResponse) error
		CancelTransfer(ctx context.Context, in *CancelTransferRequest, out *CancelTransferResponse) error
	}
	type TxAPI struct {
		txAPI
	}
	h := &txAPIHandler{hdlr}
	return s.Handle(s.NewHandler(&TxAPI{h}, opts...))
}

type txAPIHandler struct {
	TxAPIHandler
}

func (h *txAPIHandler) CreateTransfer(ctx context.Context, in *CreateTransferRequest, out *CreateTransferResponse) error {
	return h.TxAPIHandler.CreateTransfer(ctx, in, out)
}

func (h *txAPIHandler) GetTransferStatus(ctx context.Context, in *GetTransferStatusRequest, out *GetTransferStatusResponse) error {
	return h.TxAPIHandler.GetTransferStatus(ctx, in, out)
}

func (h *txAPIHandler) CancelTransfer(ctx context.Context, in *CancelTransferRequest, out *CancelTransferResponse) error {
	return h.TxAPIHandler.CancelTransfer(ctx, in, out)
}
